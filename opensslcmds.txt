
Step 1 – Creating the SSL Certificate
Step 2 – Configuring Apache to Use SSL
Step 3 – Adjusting the Firewall  <--- NO NEED TO DO THIS STEP (SKIP)
Step 4 – Enabling the Changes in Apache
Step 5 – Testing Encryption
Step 6 – Changing to a Permanent Redirect

Note: A self-signed certificate will encrypt communication between your server and any clients. However, because it is not signed by any of the trusted certificate authorities included with web browsers, users cannot use the certificate to validate the identity of your server automatically.

______________________________________________________________
Step 1 – Creating the SSL Certificate
_______________________________________________________________


TLS/SSL works by using a combination of a public certificate and a private key. The SSL key is kept secret on the server. It is used to encrypt content sent to clients. The SSL certificate is publicly shared with anyone requesting the content. It can be used to decrypt the content signed by the associated SSL key.


We can create a self-signed key and certificate pair with OpenSSL in a single command:

-------------.COMMAND.1.----------------
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt
----------------------------------------

The entirety of the prompts will look something like this:

==============.OUTPUT.1.================

Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:New York
Locality Name (eg, city) []:New York City
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Bouncy Castles, Inc.
Organizational Unit Name (eg, section) []:Ministry of Water Slides
Common Name (e.g. server FQDN or YOUR name) []:server_IP_address
Email Address []:admin@your_domain.com
Both of the files you created will be placed in the appropriate subdirectories under /etc/ssl.

========================================




__________________________________________________
Step 2 – Configuring Apache to Use SSL
_________________________________________


We have created our key and certificate files under the /etc/ssl directory. Now we just need to modify our Apache configuration to take advantage of these.

Create a new snippet in the /etc/apache2/conf-available directory. We will name the file ssl-params.conf to make its purpose clear:

--------------.COMMAND.2.1.--------------
sudo vim /etc/apache2/conf-available/ssl-params.conf
-----------------------------------------


Paste the configuration into the ssl-params.conf file we opened:

/etc/apache2/conf-available/ssl-params.conf

*************.PASTE THIS IN OPENED CONF FILE************************

SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH
SSLProtocol All -SSLv2 -SSLv3 -TLSv1 -TLSv1.1
SSLHonorCipherOrder On
# Disable preloading HSTS for now.  You can use the commented out header line that includes
# the "preload" directive if you understand the implications.
# Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
Header always set X-Frame-Options DENY
Header always set X-Content-Type-Options nosniff
# Requires Apache >= 2.4
SSLCompression off
SSLUseStapling on
SSLStaplingCache "shmcb:logs/stapling-cache(150000)"
# Requires Apache >= 2.4.11
SSLSessionTickets Off

*******************************************************************


Save and close the file when you are finished.




Modifying the Default Apache SSL Virtual Host File

Next, let's modify /etc/apache2/sites-available/default-ssl.conf, the default Apache SSL Virtual Host file. If you are using a different server block file, substitute its name in the commands below.



Before we go any further, let's back up the original SSL Virtual Host file:
-----------------.COMMAND.2.2.--------------------------------------
sudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/default-ssl.conf.bak
--------------------------------------------------------------------



Now, open the SSL Virtual Host file to make adjustments:
-----------------.COMMAND.2.3----------------------------------------
sudo vim /etc/apache2/sites-available/default-ssl.conf
---------------------------------------------------------------------



Inside, with most of the comments removed, the Virtual Host file should look something like this by default:

/etc/apache2/sites-available/default-ssl.conf
=============================.OUTPUT.2.3.===============================

<IfModule mod_ssl.c>
        <VirtualHost _default_:443>
                ServerAdmin webmaster@localhost         <------- WE WILL BE CHANGING THIS

                DocumentRoot /var/www/html

                ErrorLog ${APACHE_LOG_DIR}/error.log
                CustomLog ${APACHE_LOG_DIR}/access.log combined

                SSLEngine on

                SSLCertificateFile      /etc/ssl/certs/ssl-cert-snakeoil.pem   <--|
                SSLCertificateKeyFile /etc/ssl/private/ssl-cert-snakeoil.key   <--|<--------AND THIS

                <FilesMatch "\.(cgi|shtml|phtml|php)$">
                                SSLOptions +StdEnvVars
                </FilesMatch>
                <Directory /usr/lib/cgi-bin>
                                SSLOptions +StdEnvVars
                </Directory>

        </VirtualHost>
</IfModule>

======================================================================

We will be making some minor adjustments to the file. We will set the normal things we'd want to adjust in a Virtual Host file (ServerAdmin email address, ServerName, etc., and adjust the SSL directives to point to our certificate and key files.



After making these changes, your server block should look similar to this:

/etc/apache2/sites-available/default-ssl.conf

************.MAKE FOLLOWING CHANGES TO ABOVE FILE.**************

<IfModule mod_ssl.c>
        <VirtualHost _default_:443>
                ServerAdmin your_email@example.com              <--|
                ServerName server_domain_or_IP                  <--|<---TO THIS

                DocumentRoot /var/www/html

                ErrorLog ${APACHE_LOG_DIR}/error.log
                CustomLog ${APACHE_LOG_DIR}/access.log combined

                SSLEngine on

                SSLCertificateFile      /etc/ssl/certs/apache-selfsigned.crt   <--|
                SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key   <--|<---AND THIS

                <FilesMatch "\.(cgi|shtml|phtml|php)$">
                                SSLOptions +StdEnvVars
                </FilesMatch>
                <Directory /usr/lib/cgi-bin>
                                SSLOptions +StdEnvVars
                </Directory>

        </VirtualHost>
</IfModule>

******************************************************************

Save and close the file when you are finished.



To adjust the unencrypted Virtual Host file to redirect all traffic to be SSL encrypted, we can open the

/etc/apache2/sites-available/000-default.conf file:

--------------.COMMAND.2.4.----------------------------
sudo vim /etc/apache2/sites-available/000-default.conf
-------------------------------------------------------



Inside, within the VirtualHost configuration blocks, we need to add a Redirect directive, pointing all traffic to the SSL version of the site:

/etc/apache2/sites-available/000-default.conf

*********.MAKE FOLLOWING CHANGES TO ABOVE FILE.************

<VirtualHost *:80>
        . . .

        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/html

        Redirect "/" "https://your_domain_or_IP/"   <--ADD THIS LINE

        . . .
</VirtualHost>

***********************************************************

Save and close the file when you are finished.





_________NO NEED TO DO THIS STEP (SKIP)______________________________
Step 3 – Adjusting the Firewall
_____________________________________________________________________

If you have the ufw firewall enabled, as recommended by the prerequisite guides, you might need to adjust the settings to allow for SSL traffic. Luckily, Apache registers a few profiles with ufw upon installation.

We can see the available profiles by typing:

sudo ufw app list
You should see a list like this:

Output
Available applications:
  Apache
  Apache Full
  Apache Secure
  OpenSSH
You can see the current setting by typing:

sudo ufw status
If you allowed only regular HTTP traffic earlier, your output might look like this:

Output
Status: active

To                         Action      From
--                         ------      ----
OpenSSH                    ALLOW       Anywhere
Apache                     ALLOW       Anywhere
OpenSSH (v6)               ALLOW       Anywhere (v6)
Apache (v6)                ALLOW       Anywhere (v6)
To additionally let in HTTPS traffic, we can allow the "Apache Full" profile and then delete the redundant "Apache" profile allowance:

sudo ufw allow 'Apache Full'
sudo ufw delete allow 'Apache'
Your status should look like this now:

sudo ufw status
Output
Status: active

To                         Action      From
--                         ------      ----
OpenSSH                    ALLOW       Anywhere
Apache Full                ALLOW       Anywhere
OpenSSH (v6)               ALLOW       Anywhere (v6)
Apache Full (v6)           ALLOW       Anywhere (v6)





______________________________________________________________________
Step 4 – Enabling the Changes in Apache
______________________________________________________________________

Now that we've made our changes and adjusted our firewall, we can enable the SSL and headers modules in Apache, enable our SSL-ready Virtual Host, and restart Apache.

We can enable mod_ssl, the Apache SSL module, and mod_headers, needed by some of the settings in our SSL snippet, with the a2enmod command:


-----------------------.COMMAND.4.1.----------------------
sudo a2enmod ssl
-----------------------------------------------------------



-----------------------.COMMAND.4.2.----------------------
sudo a2enmod headers
-----------------------------------------------------------



Next, we can enable our SSL Virtual Host with the a2ensite command:

-----------------------.COMMAND.4.3.----------------------
sudo a2ensite default-ssl
-----------------------------------------------------------



We will also need to enable our ssl-params.conf file, to read in the values we set:

-----------------------.COMMAND.4.4.----------------------
sudo a2enconf ssl-params
-----------------------------------------------------------



At this point, our site and the necessary modules are enabled. We should check to make sure that there are no syntax errors in our files. We can do this by typing:

-----------------------.COMMAND.4.5.----------------------
sudo apache2ctl configtest
-----------------------------------------------------------


If everything is successful, you will get a result that looks like this:

***************************Output************************************
AH00558: apache2: Could not reliably determine the server's fully qualified domain name, using 127.0.1.1. Set the 'ServerName' directive globally to suppress this message
Syntax OK
*********************************************************************

NOTE :: The first line is just a message telling you that the ServerName directive is not set globally. If you want to get rid of that message, you can set ServerName to your server's domain name or IP address in /etc/apache2/apache2.conf. This is optional as the message will do no harm.



If your output has Syntax OK in it, your configuration file has no syntax errors. We can safely restart Apache to implement our changes:

-----------------------.COMMAND.4.6.----------------------
sudo systemctl restart apache2
-----------------------------------------------------------


________________________________________________________________
Step 5 – Testing Encryption
________________________________________________________________
Now, we're ready to test our SSL server.

Open your web browser and type https:// followed by your server's domain name or IP into the address bar:

https://server_domain_or_IP
ubuntu@ip-172-31-17-167:~/AST$
